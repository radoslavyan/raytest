{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rados\\\\DevSource\\\\ReactAndDotNetProject\\\\ReactSource\\\\src\\\\Genres\\\\CreateGenre.tsx\";\nimport { Form, Formik } from \"formik\";\nimport Button from \"../utils/Button\";\nimport * as yup from 'yup';\nimport TextField from \"../Forms/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function CreateGenres() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Create Genres Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        name: ''\n      },\n      onSubmit: async value => {\n        //when the form is posted\n        await new Promise(resolve => setTimeout(resolve, 3000));\n        console.log(value);\n      },\n      validationSchema: yup.object({\n        name: yup.string().required(\"This field is required\")\n      }),\n      children: formikProps => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          field: \"name\",\n          displayName: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: formikProps.isSubmitting,\n          type: \"submit\",\n          children: \"Save Chagens\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"btn btn-secondary\",\n          href: \"/genres\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_c = CreateGenres;\nvar _c;\n$RefreshReg$(_c, \"CreateGenres\");","map":{"version":3,"names":["Form","Formik","Button","yup","TextField","jsxDEV","_jsxDEV","Fragment","_Fragment","CreateGenres","children","fileName","_jsxFileName","lineNumber","columnNumber","initialValues","name","onSubmit","value","Promise","resolve","setTimeout","console","log","validationSchema","object","string","required","formikProps","field","displayName","disabled","isSubmitting","type","className","href","_c","$RefreshReg$"],"sources":["C:/Users/rados/DevSource/ReactAndDotNetProject/ReactSource/src/Genres/CreateGenre.tsx"],"sourcesContent":["import { Form, Formik } from \"formik\";\r\nimport Button from \"../utils/Button\";\r\nimport * as yup from 'yup';\r\nimport TextField from \"../Forms/TextField\";\r\n\r\nexport default function CreateGenres() {\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>Create Genres Test</h3>\r\n\r\n\r\n            <Formik initialValues={{\r\n                name: ''\r\n            }}\r\n                onSubmit={async value => {\r\n                    //when the form is posted\r\n                    await new Promise(resolve => setTimeout(resolve, 3000));\r\n                    console.log(value);\r\n                }}\r\n                validationSchema={yup.object({\r\n                    name: yup.string().required(\"This field is required\")\r\n                })}\r\n            >\r\n                {(formikProps) => (\r\n                    < Form >\r\n                        <TextField field=\"name\" displayName=\"Name\" />\r\n                        <Button disabled={formikProps.isSubmitting} type=\"submit\">Save Chagens</Button>\r\n                        <a className=\"btn btn-secondary\" href=\"/genres\">Cancel</a>\r\n\r\n                    </Form>\r\n                )}\r\n\r\n\r\n            </Formik >\r\n        </>\r\n    )\r\n}"],"mappings":";AAAA,SAASA,IAAI,EAAEC,MAAM,QAAQ,QAAQ;AACrC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,SAAS,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,eAAe,SAASC,YAAYA,CAAA,EAAG;EAGnC,oBACIH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACIJ,OAAA;MAAAI,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAG3BR,OAAA,CAACL,MAAM;MAACc,aAAa,EAAE;QACnBC,IAAI,EAAE;MACV,CAAE;MACEC,QAAQ,EAAE,MAAMC,KAAK,IAAI;QACrB;QACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QACvDE,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;MACtB,CAAE;MACFM,gBAAgB,EAAErB,GAAG,CAACsB,MAAM,CAAC;QACzBT,IAAI,EAAEb,GAAG,CAACuB,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,wBAAwB;MACxD,CAAC,CAAE;MAAAjB,QAAA,EAEDkB,WAAW,iBACTtB,OAAA,CAAEN,IAAI;QAAAU,QAAA,gBACFJ,OAAA,CAACF,SAAS;UAACyB,KAAK,EAAC,MAAM;UAACC,WAAW,EAAC;QAAM;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC7CR,OAAA,CAACJ,MAAM;UAAC6B,QAAQ,EAAEH,WAAW,CAACI,YAAa;UAACC,IAAI,EAAC,QAAQ;UAAAvB,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC/ER,OAAA;UAAG4B,SAAS,EAAC,mBAAmB;UAACC,IAAI,EAAC,SAAS;UAAAzB,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExD;IACT;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGI,CAAC;EAAA,eACZ,CAAC;AAEX;AAACsB,EAAA,GAjCuB3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}