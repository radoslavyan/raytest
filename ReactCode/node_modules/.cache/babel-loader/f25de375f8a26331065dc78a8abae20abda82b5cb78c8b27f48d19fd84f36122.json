{"ast":null,"code":"import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key, options = {}) {\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {Object=} options.context\n   * @param {Object=} options.parent\n   */\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n  resolve() {\n    return this;\n  }\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n  toString() {\n    return `Ref(${this.key})`;\n  }\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;","map":{"version":3,"names":["getter","prefixes","context","value","create","key","options","Reference","constructor","TypeError","trim","isContext","isValue","isSibling","prefix","path","slice","length","map","getValue","parent","result","cast","resolve","describe","type","toString","isRef","__isYupRef","prototype"],"sources":["C:/Users/rados/DevSource/ReactAndDotNetProject/ReactSource/node_modules/yup/es/Reference.js"],"sourcesContent":["import { getter } from 'property-expr';\nconst prefixes = {\n  context: '$',\n  value: '.'\n};\nexport function create(key, options) {\n  return new Reference(key, options);\n}\nexport default class Reference {\n  constructor(key, options = {}) {\n    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);\n    this.key = key.trim();\n    if (key === '') throw new TypeError('ref must be a non-empty string');\n    this.isContext = this.key[0] === prefixes.context;\n    this.isValue = this.key[0] === prefixes.value;\n    this.isSibling = !this.isContext && !this.isValue;\n    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';\n    this.path = this.key.slice(prefix.length);\n    this.getter = this.path && getter(this.path, true);\n    this.map = options.map;\n  }\n\n  getValue(value, parent, context) {\n    let result = this.isContext ? context : this.isValue ? value : parent;\n    if (this.getter) result = this.getter(result || {});\n    if (this.map) result = this.map(result);\n    return result;\n  }\n  /**\n   *\n   * @param {*} value\n   * @param {Object} options\n   * @param {Object=} options.context\n   * @param {Object=} options.parent\n   */\n\n\n  cast(value, options) {\n    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);\n  }\n\n  resolve() {\n    return this;\n  }\n\n  describe() {\n    return {\n      type: 'ref',\n      key: this.key\n    };\n  }\n\n  toString() {\n    return `Ref(${this.key})`;\n  }\n\n  static isRef(value) {\n    return value && value.__isYupRef;\n  }\n\n} // @ts-ignore\n\nReference.prototype.__isYupRef = true;"],"mappings":"AAAA,SAASA,MAAM,QAAQ,eAAe;AACtC,MAAMC,QAAQ,GAAG;EACfC,OAAO,EAAE,GAAG;EACZC,KAAK,EAAE;AACT,CAAC;AACD,OAAO,SAASC,MAAMA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACnC,OAAO,IAAIC,SAAS,CAACF,GAAG,EAAEC,OAAO,CAAC;AACpC;AACA,eAAe,MAAMC,SAAS,CAAC;EAC7BC,WAAWA,CAACH,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7B,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE,MAAM,IAAII,SAAS,CAAC,6BAA6B,GAAGJ,GAAG,CAAC;IACrF,IAAI,CAACA,GAAG,GAAGA,GAAG,CAACK,IAAI,CAAC,CAAC;IACrB,IAAIL,GAAG,KAAK,EAAE,EAAE,MAAM,IAAII,SAAS,CAAC,gCAAgC,CAAC;IACrE,IAAI,CAACE,SAAS,GAAG,IAAI,CAACN,GAAG,CAAC,CAAC,CAAC,KAAKJ,QAAQ,CAACC,OAAO;IACjD,IAAI,CAACU,OAAO,GAAG,IAAI,CAACP,GAAG,CAAC,CAAC,CAAC,KAAKJ,QAAQ,CAACE,KAAK;IAC7C,IAAI,CAACU,SAAS,GAAG,CAAC,IAAI,CAACF,SAAS,IAAI,CAAC,IAAI,CAACC,OAAO;IACjD,IAAIE,MAAM,GAAG,IAAI,CAACH,SAAS,GAAGV,QAAQ,CAACC,OAAO,GAAG,IAAI,CAACU,OAAO,GAAGX,QAAQ,CAACE,KAAK,GAAG,EAAE;IACnF,IAAI,CAACY,IAAI,GAAG,IAAI,CAACV,GAAG,CAACW,KAAK,CAACF,MAAM,CAACG,MAAM,CAAC;IACzC,IAAI,CAACjB,MAAM,GAAG,IAAI,CAACe,IAAI,IAAIf,MAAM,CAAC,IAAI,CAACe,IAAI,EAAE,IAAI,CAAC;IAClD,IAAI,CAACG,GAAG,GAAGZ,OAAO,CAACY,GAAG;EACxB;EAEAC,QAAQA,CAAChB,KAAK,EAAEiB,MAAM,EAAElB,OAAO,EAAE;IAC/B,IAAImB,MAAM,GAAG,IAAI,CAACV,SAAS,GAAGT,OAAO,GAAG,IAAI,CAACU,OAAO,GAAGT,KAAK,GAAGiB,MAAM;IACrE,IAAI,IAAI,CAACpB,MAAM,EAAEqB,MAAM,GAAG,IAAI,CAACrB,MAAM,CAACqB,MAAM,IAAI,CAAC,CAAC,CAAC;IACnD,IAAI,IAAI,CAACH,GAAG,EAAEG,MAAM,GAAG,IAAI,CAACH,GAAG,CAACG,MAAM,CAAC;IACvC,OAAOA,MAAM;EACf;EACA;AACF;AACA;AACA;AACA;AACA;AACA;;EAGEC,IAAIA,CAACnB,KAAK,EAAEG,OAAO,EAAE;IACnB,OAAO,IAAI,CAACa,QAAQ,CAAChB,KAAK,EAAEG,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACc,MAAM,EAAEd,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACJ,OAAO,CAAC;EACpH;EAEAqB,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI;EACb;EAEAC,QAAQA,CAAA,EAAG;IACT,OAAO;MACLC,IAAI,EAAE,KAAK;MACXpB,GAAG,EAAE,IAAI,CAACA;IACZ,CAAC;EACH;EAEAqB,QAAQA,CAAA,EAAG;IACT,OAAQ,OAAM,IAAI,CAACrB,GAAI,GAAE;EAC3B;EAEA,OAAOsB,KAAKA,CAACxB,KAAK,EAAE;IAClB,OAAOA,KAAK,IAAIA,KAAK,CAACyB,UAAU;EAClC;AAEF,CAAC,CAAC;;AAEFrB,SAAS,CAACsB,SAAS,CAACD,UAAU,GAAG,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}