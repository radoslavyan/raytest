{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rados\\\\OneDrive\\\\Skrivebord\\\\rep\\\\TimeLogger\\\\client\\\\src\\\\components\\\\Timeregistration\\\\CreateTimeregistration.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport * as timeregistrationEndpoints from \"../../endpoints/TimeregistrationEndpoints\";\nimport * as projectEndpoints from \"../../endpoints/ProjectEndpoints\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateTimeregistration({\n  onTimeregistrationCreated\n}) {\n  _s();\n\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [timeregistration, setTimeregistration] = useState({\n    projectId: undefined,\n    startTime: '',\n    endTime: '',\n    timeSpentInHours: '',\n    errors: {\n      duration: '',\n      invalidDateRange: ''\n    }\n  });\n  const [projectCompleted, setProjectCompleted] = useState(false);\n  useEffect(() => {\n    const fetchProjectDetails = async () => {\n      if (timeregistration.projectId) {\n        try {\n          const project = await projectEndpoints.getById(timeregistration.projectId);\n\n          if (project.isCompleted === true) {\n            setProjectCompleted(true);\n          }\n        } catch (error) {\n          console.error(\"Failed to fetch project details\", error); // Consider setting projectCompleted to false or showing an error to the user\n        }\n      }\n    };\n\n    fetchProjectDetails();\n  }, [timeregistration.projectId]);\n  useEffect(() => {\n    if (timeregistration.startTime && timeregistration.endTime) {\n      const start = new Date(timeregistration.startTime);\n      const end = new Date(timeregistration.endTime);\n      const diff = end.getTime() - start.getTime(); // Difference in milliseconds\n\n      const minutes = diff / (1000 * 60); // Convert milliseconds to minutes\n\n      if (start >= end) {\n        // Set error message for invalid date range\n        setIsFormValid(false);\n        setTimeregistration(prevState => ({ ...prevState,\n          errors: { ...prevState.errors,\n            invalidDateRange: 'End time must be after start time.'\n          }\n        }));\n      } else if (minutes < 30) {\n        // Set error message for duration less than 30 minutes\n        setIsFormValid(false);\n        setTimeregistration(prevState => ({ ...prevState,\n          errors: { ...prevState.errors,\n            duration: 'Time registration must be 30 minutes or longer.'\n          }\n        }));\n      } else {\n        // Clear errors and update time spent if all conditions are met\n        setIsFormValid(true);\n        const hours = diff / (1000 * 60 * 60); // Convert milliseconds to hours\n\n        setTimeregistration(prevState => ({ ...prevState,\n          timeSpentInHours: hours.toFixed(2),\n          // Keep two decimal places\n          errors: { ...prevState.errors,\n            duration: '',\n            invalidDateRange: ''\n          }\n        }));\n      }\n    }\n  }, [timeregistration.startTime, timeregistration.endTime]);\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    if (!timeregistration) {\n      console.error(\"Timeregistration data is undefined.\");\n      return;\n    }\n\n    if (!timeregistration.startTime) {\n      console.error(\"Start time must be provided.\");\n      return;\n    }\n\n    if (!timeregistration.endTime) {\n      console.error(\"End time must be provided.\");\n      return;\n    }\n\n    try {\n      await timeregistrationEndpoints.createTimeregistration(timeregistration);\n      onTimeregistrationCreated();\n    } catch (error) {\n      console.error(\"Failed to create timeregistration\", error);\n    }\n  }; // Simplified change handler to update state based on input name\n\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setTimeregistration(current => ({ ...current,\n      [name]: name === 'projectId' ? parseInt(value, 10) || undefined : value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"projectId\",\n      type: \"number\",\n      value: (timeregistration === null || timeregistration === void 0 ? void 0 : timeregistration.projectId) || '',\n      onChange: handleChange,\n      placeholder: \"Project Id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"startTime\",\n      type: \"datetime-local\",\n      value: (timeregistration === null || timeregistration === void 0 ? void 0 : timeregistration.startTime) || '',\n      onChange: handleChange,\n      placeholder: \"Start Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"endTime\",\n      type: \"datetime-local\",\n      value: (timeregistration === null || timeregistration === void 0 ? void 0 : timeregistration.endTime) || '',\n      onChange: handleChange,\n      placeholder: \"End Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"timeSpentInHours\",\n      type: \"number\",\n      value: (timeregistration === null || timeregistration === void 0 ? void 0 : timeregistration.timeSpentInHours) || '',\n      onChange: handleChange,\n      placeholder: \"Time Spent In Hours\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), timeregistration.errors.duration && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: timeregistration.errors.duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 50\n    }, this), timeregistration.errors.invalidDateRange && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: timeregistration.errors.invalidDateRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 58\n    }, this), projectCompleted && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: \"This project is completed and cannot receive new time registrations.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !isFormValid || projectCompleted,\n      children: \"Create Timeregistration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateTimeregistration, \"PJG0tWsdDJq+pfb8g1LbHonh8/A=\");\n\n_c = CreateTimeregistration;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTimeregistration\");","map":{"version":3,"names":["React","useEffect","useState","timeregistrationEndpoints","projectEndpoints","CreateTimeregistration","onTimeregistrationCreated","isFormValid","setIsFormValid","timeregistration","setTimeregistration","projectId","undefined","startTime","endTime","timeSpentInHours","errors","duration","invalidDateRange","projectCompleted","setProjectCompleted","fetchProjectDetails","project","getById","isCompleted","error","console","start","Date","end","diff","getTime","minutes","prevState","hours","toFixed","handleSubmit","e","preventDefault","createTimeregistration","handleChange","name","value","target","current","parseInt"],"sources":["C:/Users/rados/OneDrive/Skrivebord/rep/TimeLogger/client/src/components/Timeregistration/CreateTimeregistration.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport * as timeregistrationEndpoints from \"../../endpoints/TimeregistrationEndpoints\";\r\nimport * as projectEndpoints from \"../../endpoints/ProjectEndpoints\";\r\n\r\n\r\n\r\ninterface CreateTimeregistrationProps {\r\n    onTimeregistrationCreated: () => void;\r\n}\r\n\r\nexport default function CreateTimeregistration({ onTimeregistrationCreated }: CreateTimeregistrationProps) {\r\n\r\n    const [isFormValid, setIsFormValid] = useState(false);\r\n\r\n    const [timeregistration, setTimeregistration] = useState({\r\n        projectId: undefined,\r\n        startTime: '',\r\n        endTime: '',\r\n        timeSpentInHours: '',\r\n        errors: {\r\n            duration: '',\r\n            invalidDateRange: ''\r\n        }\r\n    });\r\n\r\n    const [projectCompleted, setProjectCompleted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchProjectDetails = async () => {\r\n            if (timeregistration.projectId) {\r\n                try {\r\n                    const project = await projectEndpoints.getById(timeregistration.projectId);\r\n                    if(project.isCompleted === true) {\r\n                        setProjectCompleted(true);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Failed to fetch project details\", error);\r\n                    // Consider setting projectCompleted to false or showing an error to the user\r\n                }\r\n            }\r\n        };\r\n    \r\n        fetchProjectDetails();\r\n    }, [timeregistration.projectId]);\r\n\r\n    \r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        if (timeregistration.startTime && timeregistration.endTime) {\r\n            const start = new Date(timeregistration.startTime);\r\n            const end = new Date(timeregistration.endTime);\r\n            const diff = end.getTime() - start.getTime(); // Difference in milliseconds\r\n            const minutes = diff / (1000 * 60); // Convert milliseconds to minutes\r\n\r\n            if (start >= end) {\r\n                // Set error message for invalid date range\r\n                setIsFormValid(false);\r\n                setTimeregistration(prevState => ({\r\n                    ...prevState,\r\n                    errors: { ...prevState.errors, invalidDateRange: 'End time must be after start time.' }\r\n                }));\r\n            } else if (minutes < 30) {\r\n                // Set error message for duration less than 30 minutes\r\n                setIsFormValid(false);\r\n                setTimeregistration(prevState => ({\r\n                    ...prevState,\r\n                    errors: { ...prevState.errors, duration: 'Time registration must be 30 minutes or longer.' }\r\n                }));\r\n            } else {\r\n                // Clear errors and update time spent if all conditions are met\r\n                setIsFormValid(true);\r\n                const hours = diff / (1000 * 60 * 60); // Convert milliseconds to hours\r\n                setTimeregistration(prevState => ({\r\n                    ...prevState,\r\n                    timeSpentInHours: hours.toFixed(2), // Keep two decimal places\r\n                    errors: { ...prevState.errors, duration: '', invalidDateRange: '' }\r\n                }));\r\n            }\r\n        }\r\n    }, [timeregistration.startTime, timeregistration.endTime]);\r\n\r\n\r\n\r\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        if (!timeregistration) {\r\n            console.error(\"Timeregistration data is undefined.\");\r\n            return;\r\n        }\r\n\r\n        if (!timeregistration.startTime) {\r\n            console.error(\"Start time must be provided.\");\r\n            return;\r\n        }\r\n\r\n        if (!timeregistration.endTime) {\r\n            console.error(\"End time must be provided.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await timeregistrationEndpoints.createTimeregistration(timeregistration);\r\n            onTimeregistrationCreated();\r\n        } catch (error) {\r\n            console.error(\"Failed to create timeregistration\", error);\r\n        }\r\n    };\r\n\r\n    // Simplified change handler to update state based on input name\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { name, value } = e.target;\r\n        setTimeregistration(current => ({\r\n            ...current,\r\n            [name]: name === 'projectId' ? parseInt(value, 10) || undefined : value\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                name=\"projectId\"\r\n                type=\"number\"\r\n                value={timeregistration?.projectId || ''}\r\n                onChange={handleChange}\r\n                placeholder=\"Project Id\"\r\n            />\r\n            <input\r\n                name=\"startTime\"\r\n                type=\"datetime-local\"\r\n                value={timeregistration?.startTime || ''}\r\n                onChange={handleChange}\r\n                placeholder=\"Start Time\"\r\n            />\r\n            <input\r\n                name=\"endTime\"\r\n                type=\"datetime-local\"\r\n                value={timeregistration?.endTime || ''}\r\n                onChange={handleChange}\r\n                placeholder=\"End Time\"\r\n            />\r\n            <input\r\n                name=\"timeSpentInHours\"\r\n                type=\"number\"\r\n                value={timeregistration?.timeSpentInHours || ''}\r\n                onChange={handleChange}\r\n                placeholder=\"Time Spent In Hours\"\r\n            />\r\n            {timeregistration.errors.duration && <div className=\"error\">{timeregistration.errors.duration}</div>}\r\n            {timeregistration.errors.invalidDateRange && <div className=\"error\">{timeregistration.errors.invalidDateRange}</div>}\r\n            {projectCompleted && <div className=\"error\">This project is completed and cannot receive new time registrations.</div>}\r\n\r\n            <button type=\"submit\" disabled={!isFormValid || projectCompleted}>Create Timeregistration</button>\r\n\r\n        </form>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}